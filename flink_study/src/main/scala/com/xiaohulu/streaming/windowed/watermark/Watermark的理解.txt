https://www.jianshu.com/p/2e87abfe89ff
https://www.cnblogs.com/rossiXYZ/p/12286407.html
1、在Apache Flink中使用watermark的4个理解
        当人们第一次使用Flink时，经常会对watermark感到困惑。但其实watermark并不复杂。让我们通过一个简单的例子来说明为什么我们需要watermark，以及它的工作机制是什么样的。
        在下文中的例子中，我们有一个带有时间戳的事件流，但是由于某种原因它们并不是按顺序到达的。图中的数字代表事件发生的时间戳。第一个到达的事件发生在时间4，然后它后面跟着的是发生在更早时间（时间2）的事件，以此类推：
        注意这是一个按照事件时间处理的例子，这意味着时间戳反映的是事件发生的时间，而不是处理事件的时间。事件时间（Event-Time）处理的强大之处在于，无论是在处理实时的数据还是重新处理历史的数据，基于事件时间创建的流计算应用都能保证结果是一样的。
        现在假设我们正在尝试创建一个流计算排序算子。也就是处理一个乱序到达的事件流，并按照事件时间的顺序输出事件。
    理解1
        数据流中的第一个元素的时间是4，但是我们不能直接将它作为排序后数据流的第一个元素并输出它。因为数据是乱序到达的，也许有一个更早发生的数据还没有到达。事实上，我们能预见一些这个流的未来，也就是我们的排序算子至少要等到2这条数据的到达再输出结果。
        有缓存，就必然有延迟。
    理解2
        如果我们做错了，我们可能会永远等待下去。首先，我们的应用程序从看到时间4的数据，然后看到时间2的数据。是否会有一个比时间2更早的数据到达呢？也许会，也许不会。我们可以一直等下去，但可能永远看不到1。
        最终，我们必须勇敢地输出 2 作为排序流的第一个结果
    理解3
        我们需要的是某种策略，它定义了对于任何带时间戳的事件流，何时停止等待更早数据的到来。
        这正是 watermark 的作用，他们定义了何时不再等待更早的数据。
        Flink中的事件时间处理依赖于一种特殊的带时间戳的元素，成为watermark，它们会由数据源或是watermark生成器插入数据流中。具有时间戳t的watermark可以被理解为断言了所有时间戳小于或等于t的事件都（在某种合理的概率上）已经到达了。
        注：此处原文是“小于”，译者认为应该是 “小于或等于”，因为 Flink 源码中采用的是 “小于或等于” 的机制。
        何时我们的排序算子应该停止等待，然后将事件2作为首个元素输出？答案是当收到时间戳为2（或更大）的watermark时。
    理解4
        我们可以设想不同的策略来生成watermark。
        我们知道每个事件都会延迟一段时间才到达，而这些延迟差异会比较大，所以有些事件会比其他事件延迟更多。一种简单的方法是假设这些延迟不会超过某个最大值。Flink 把这种策略称作 “有界无序生成策略”（bounded-out-of-orderness）。当然也有很多更复杂的方式去生成watermark，但是对于大多数应用来说，固定延迟的方式已经足够了。
        如果想要构建一个类似排序的流应用，可以使用Flink的ProcessFunction。它提供了对事件时间计时器（基于watermark触发回调）的访问，还提供了可以用来缓存数据的托管状态接口。

2、watermarks的生成方式
    通常，在接收到source的数据后，应该立刻生成watermark；但是，也可以在source后，应用简单的map或者filter操作后，再生成watermark。
    注意：如果指定多次watermark，后面指定的会覆盖前面的值。
    生成方式
        With Periodic Watermarks
            周期性的触发watermark的生成和发送，默认是100ms
            每隔N秒自动向流里注入一个WATERMARK
            时间间隔由ExecutionConfig.setAutoWatermarkInterval 决定.
            每次调用getCurrentWatermark 方法, 如果得到的WATERMARK
            不为空并且比之前的大就注入流中
            可以定义一个最大允许乱序的时间，这种比较常用
            实现AssignerWithPeriodicWatermarks接口

            标点水位线（Punctuated Watermark）通过数据流中某些特殊标记事件来触发新水位线的生成。这种方式下窗口的触发与时间无关，而是决定于何时收到标记事件。
            在实际的生产中Punctuated方式在TPS很高的场景下会产生大量的Watermark在一定程度上对下游算子造成压力，所以只有在实时性要求非常高的场景才会选择Punctuated的方式进行Watermark的生成。

        With Punctuated Watermarks
            基于某些事件触发watermark的生成和发送
            基于事件向流里注入一个WATERMARK，每一个元素都有机会判断是否生成一个WATERMARK.
            如果得到的WATERMARK 不为空并且比之前的大就注入流中
            实现AssignerWithPunctuatedWatermarks接口

            周期性的（允许一定时间间隔或者达到一定的记录条数）产生一个Watermark。水位线提升的时间间隔是由用户设置的，在两次水位线提升时隔内会有一部分消息流入，用户可以根据这部分数据来计算出新的水位线。
            在实际的生产中Periodic的方式必须结合时间和积累条数两个维度继续周期性产生Watermark，否则在极端情况下会有很大的延时。
            举个例子，最简单的水位线算法就是取目前为止最大的事件时间，然而这种方式比较暴力，对乱序事件的容忍程度比较低，容易出现大量迟到事件。

3、窗口触发条件

    上面谈到了对数据乱序问题的处理机制是watermark+window，那么window什么时候该被触发呢？
    基于Event Time的事件处理，Flink默认的事件触发条件为：
        对于out-of-order及正常的数据而言
            watermark的时间戳 > = window endTime
            在 [window_start_time,window_end_time] 中有数据存在。
        对于late element太多的数据而言
            Event Time > watermark的时间戳

    WaterMark相当于一个EndLine，一旦Watermarks大于了某个window的end_time，就意味着windows_end_time时间和WaterMark时间相同的窗口开始计算执行了。
    就是说，我们根据一定规则，计算出Watermarks，并且设置一些延迟，给迟到的数据一些机会，也就是说正常来讲，对于迟到的数据，我只等你一段时间，再不来就没有机会了。
    WaterMark时间可以用Flink系统现实时间，也可以用处理数据所携带的Event time。
    使用Flink系统现实时间，在并行和多线程中需要注意的问题较少，因为都是以现实时间为标准。
    如果使用处理数据所携带的Event time作为WaterMark时间，需要注意两点：
        因为数据到达并不是循序的，注意保存一个当前最大时间戳作为WaterMark时间
        并行同步问题

4、迟到事件
    虽说水位线表明着早于它的事件不应该再出现，但是上如上文所讲，接收到水位线以前的的消息是不可避免的，这就是所谓的迟到事件。
    实际上迟到事件是乱序事件的特例，和一般乱序事件不同的是它们的乱序程度超出了水位线的预计，导致窗口在它们到达之前已经关闭。

    迟到事件出现时窗口已经关闭并产出了计算结果，因此处理的方法有3种：
        重新激活已经关闭的窗口并重新计算以修正结果。
        将迟到事件收集起来另外处理。
        将迟到事件视为错误消息并丢弃。

    Flink 默认的处理方式是第3种直接丢弃，其他两种方式分别使用Side Output和Allowed Lateness。--------------------->StreamingWindowWatermarkScala2

        Side Output机制可以将迟到事件单独放入一个数据流分支，这会作为 window 计算结果的副产品，以便用户获取并对其进行特殊处理。
        Allowed Lateness机制允许用户设置一个允许的最大迟到时长。Flink 会在窗口关闭后一直保存窗口的状态直至超过允许迟到时长，这期间的迟到事件不会被丢弃，而是默认会触发窗口重新计算。
        因为保存窗口状态需要额外内存，并且如果窗口计算使用了 ProcessWindowFunction API 还可能使得每个迟到事件触发一次窗口的全量计算，代价比较大，所以允许迟到时长不宜设得太长，迟到事件也不宜过多，
        否则应该考虑降低水位线提高的速度或者调整算法。

    这里总结机制为：
        窗口window 的作用是为了周期性的获取数据。
        watermark的作用是防止数据出现乱序(经常)，事件时间内获取不到指定的全部数据，而做的一种保险方法。
        allowLateNess是将窗口关闭时间再延迟一段时间。
        sideOutPut是最后兜底操作，所有过期延迟数据，指定窗口已经彻底关闭了，就会把数据放到侧输出流。

5、看看如何触发窗口
    我们明白了窗口的触发机制，这里我们添加了水位线，到底是个怎么个情况？我们来看下面

    假如我们设置10s的时间窗口（window），那么0~10s，10~20s都是一个窗口，以0~10s为例，0为start-time，10为end-time。假如有4个数据的event-time分别是8(A),12.5(B),9(C),13.5(D)，
    我们设置Watermarks为当前所有到达数据event-time的最大值减去延迟值3.5秒
        当A到达的时候，Watermarks为max{8}-3.5=8-3.5 = 4.5 < 10,不会触发计算
        当B到达的时候，Watermarks为max(12.5,8)-3.5=12.5-3.5 = 9 < 10,不会触发计算
        当C到达的时候，Watermarks为max(12.5,8,9)-3.5=12.5-3.5 = 9 < 10,不会触发计算
        当D到达的时候，Watermarks为max(13.5,12.5,8,9)-3.5=13.5-3.5 = 10 = 10,触发计算
        触发计算的时候，会将A，C（因为他们都小于10）都计算进去，其中C是迟到的。

    max这个很关键，就是当前窗口内，所有事件的最大事件。

    这里的延迟3.5s是我们假设一个数据到达的时候，比他早3.5s的数据肯定也都到达了，这个是需要根据经验推算。
    假设加入D到达以后有到达了一个E,event-time=6，但是由于0~10的时间窗口已经开始计算了，所以E就丢了。

    从这里上面E的丢失说明，水位线也不是万能的，但是如果根据我们自己的生产经验+侧道输出等方案，可以做到数据不丢失。

6、 设置WaterMark步骤
      1.设置StreamTime Characteristic为Event Time，即设置流式时间窗口（也可以称为流式时间特性）
      2.创建的DataStreamSource调用assignTimestampsAndWatermarks方法，并设置WaterMark种类：AssignerWithPeriodicWatermarks / AssignerWithPunctuatedWatermarks
      或者 实现AssignerWithPeriodicWatermarks接口 / 实现AssignerWithPunctuatedWatermarks接口
      3.重写getCurrentWatermark与extractTimestamp方法
      getCurrentWatermark方法：获取当前的水位线
      extractTimestamp方法：提取数据流中的时间戳（必须显式的指定数据中的Event Time）

















