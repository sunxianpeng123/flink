 一、设置并行度
    1、代码中
        env.setParallelism(1)
    2 、提交flink任务的命令中
        如果你是用命令行启动你的 Flink job，那么你也可以这样设置并行度(使用 -p 并行度)：
        注意：这样设置的并行度是你整个程序的并行度，那么后面如果你的每个算子不单独设置并行度覆盖的话，那么后面每个算子的并行度就都是这里设置的并行度的值了。
        ./bin/flink run -p 10 ../word-count.jar
    3、给算子单独设置并行度
        data.keyBy(new xxxKey())
            .flatMap(new XxxFlatMapFunction()).setParallelism(5)
            .map(new XxxMapFunction).setParallelism(5)
            .addSink(new XxxSink()).setParallelism(1)

    如上，就是在每个算子后面单独的设置并行度，这样的话，就算你前面设置了 env.setParallelism(10) 也是会被覆盖的。

    这也说明优先级是：算子设置并行度 > env 设置并行度 > 配置文件默认并行度

二、slot
    Task Manager 是从 Job Manager 处接收需要部署的 Task，任务的并行性由每个 Task Manager 上可用的 slot 决定。每个任务代表分配给任务槽的一组资源，
    slot 在 Flink 里面可以认为是资源组，Flink 将每个任务分成子任务并且将这些子任务分配到 slot 来并行执行程序。

    例如，如果 Task Manager 有四个 slot，那么它将为每个 slot 分配 25％ 的内存。 可以在一个 slot 中运行一个或多个线程。 同一 slot 中的线程共享相同的 JVM。
    同一 JVM 中的任务共享 TCP 连接和心跳消息。Task Manager 的一个 Slot 代表一个可用线程，该线程具有固定的内存，注意 Slot 只对内存隔离，没有对 CPU 隔离。
    默认情况下，Flink 允许子任务共享 Slot，即使它们是不同 task 的 subtask，只要它们来自相同的 job。这种共享可以有更好的资源利用率。

    每个 Flink TaskManager 在集群中提供 slot。 slot 的数量通常与每个 TaskManager 的可用 CPU 内核数成比例。一般情况下你的 slot 数是你每个 TaskManager 的 cpu 的核数。0

三、slot 和 parallelism
    1、slot 是指 taskmanager 的并发执行能力
    2、parallelism 是指 taskmanager 实际使用的并发能力
    3、parallelism 是可配置、可指定的
    4、
    Caused by: akka.pattern.AskTimeoutException:
    Ask timed out on [Actor[akka://flink/user/taskmanager_0#15608456]] after [10000 ms].
    Sender[null] sent message of type "org.apache.flink.runtime.rpc.messages.LocalRpcInvocation".

    我们设置的并行度 parallelism 超过了 Task Manager 能提供的最大 slot 数量，所以会报这个错误。cd